// Code generated by MockGen. DO NOT EDIT.
// Source: lead.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/icrxz/crm-api-core/internal/domain"
)

// MockLeadRepository is a mock of LeadRepository interface.
type MockLeadRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLeadRepositoryMockRecorder
}

// MockLeadRepositoryMockRecorder is the mock recorder for MockLeadRepository.
type MockLeadRepositoryMockRecorder struct {
	mock *MockLeadRepository
}

// NewMockLeadRepository creates a new mock instance.
func NewMockLeadRepository(ctrl *gomock.Controller) *MockLeadRepository {
	mock := &MockLeadRepository{ctrl: ctrl}
	mock.recorder = &MockLeadRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeadRepository) EXPECT() *MockLeadRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLeadRepository) Create(ctx context.Context, lead domain.Lead) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, lead)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLeadRepositoryMockRecorder) Create(ctx, lead interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLeadRepository)(nil).Create), ctx, lead)
}

// CreateBatch mocks base method.
func (m *MockLeadRepository) CreateBatch(ctx context.Context, leads []domain.Lead) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBatch", ctx, leads)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBatch indicates an expected call of CreateBatch.
func (mr *MockLeadRepositoryMockRecorder) CreateBatch(ctx, leads interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatch", reflect.TypeOf((*MockLeadRepository)(nil).CreateBatch), ctx, leads)
}

// Delete mocks base method.
func (m *MockLeadRepository) Delete(ctx context.Context, leadID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, leadID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockLeadRepositoryMockRecorder) Delete(ctx, leadID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLeadRepository)(nil).Delete), ctx, leadID)
}

// GetByID mocks base method.
func (m *MockLeadRepository) GetByID(ctx context.Context, leadID string) (*domain.Lead, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, leadID)
	ret0, _ := ret[0].(*domain.Lead)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockLeadRepositoryMockRecorder) GetByID(ctx, leadID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockLeadRepository)(nil).GetByID), ctx, leadID)
}

// Update mocks base method.
func (m *MockLeadRepository) Update(ctx context.Context, leadToUpdate domain.Lead) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, leadToUpdate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockLeadRepositoryMockRecorder) Update(ctx, leadToUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLeadRepository)(nil).Update), ctx, leadToUpdate)
}
